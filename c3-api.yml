openapi: "3.0.3"

info:
  version: "0.3"
  title: C3 REST API
  x-logo:
    url: "https://blog.c3.io/content/images/size/w1200/2023/01/Thumbnail-2-3.png"
    backgroundColor: "#FFFFFF"
    altText: "Petstore logo"
  description: |
                ![C3 Image](https://blog.c3.io/content/images/size/w1200/2023/02/C3-Multi-Layered-Security.png) 
                **C3 is a self-custodial exchange that utilizes a hybrid architecture combining off-chain and on-chain components for performance and security.** 

                The off-chain component handles instant trade processing and matching, while the on-chain component handles trade settlement. 
                This innovative hybrid architecture allows C3 to offer a trading platform that is both performant and accessible, similar to traditional exchanges, while remaining trustless and non-custodial at all times. 

                **• Matching Engine:** Users can place and cancel trade orders. Orders become
                either matched or enter the order book. Matched orders settle
                on-chain and evoke a borrow operation in case of trades on margin.

                **• Risk Engine:**
                Operation Approval: Any operation – except deposits – passes through the
                risk engine and is approved or disapproved according to the risk of the user’s
                account.

                **• Borrowing & Lending Pool:** Users can transfer assets to or from the pool, i.e.
                lend towards or borrow from the pool. Users’ principals accrue interest over time.

                **• Liquidation:** Unhealthy accounts, i.e. accounts which fail to respect the
                maintenance margin requirement, can be liquidated by any C3 user, if their
                liquidation requests are valid.            

                **Find more info [here...](https://blog.c3.io/)**


                # Blockchains and Assets Supported:
                - Algorand (ALGO)
                - Ethereum (ETH, USDC)
                - Avalanche (AVAX)
                

  termsOfService: https://c3.io/tos/

  contact:
    name: API Support Team
    email: hello@c3.io
    url: https://c3.io

  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html

externalDocs:
  url: https://github.com/c3exchange/sdk
  description: C3 SDK

servers:
  - url: https://api.c3.io
    description: Production server (uses live data)
  - url: https://api.test.c3.io
    description: Testnets server (uses test data)


paths:
  /system-info:
    get:
      description: "Returns the system info. That includes the current block parsed, contract ids, addresses and more."
      operationId: getSystemInfo
      responses:
        200:
          description: All Instruments response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SystemInfo"

  # References data endpoints - Public Data
  /instruments:
    get:
      description: "Returns the lists of all the instruments (Assets) used in the system."
      operationId: getInstruments
      responses:
        200:
          description: All Instruments response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AllInstruments"
              example:
                - id: "ALGO"
                  asaId: 0
                  asaName: "ALGO"
                  asaUnitName: "ALGO"
                  asaDecimals: 6
                  chains: []
                  riskParameters:
                    initial:
                      haircut: 0.4
                      margin: 0.2
                    maintenance:
                      haircut: 0.3
                      margin: 0.1
                    optUtilization: 0.8
  /instruments/pools:
    get:
      description: "Returns the list of all instrument pools in the system."
      operationId: getInstrumentsPools
      responses:
        200:
          description: All Instrument Pools response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AllInstrumentPools"
              example:
                - id: "ALGO"
                  borrowApr: 0
                  lendApr: 0
                  totalLiquidity: "1000"
                  totalBorrowed: "0"
                - id: "BTC"
                  borrowApr: 0
                  lendApr: 0
                  totalLiquidity: "1000"
                  totalBorrowed: "0"
  /instruments/prices:
    get:
      description: "Returns a list of the prices of assets used in C3. Prices are used to calculate each user's position's health. Prices are fetched from Pyth."
      operationId: getInstrumentsPrices
      responses:
        200:
          description: All Instrument Prices response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AllInstrumentPrices"
              example:
                - id: "ALGO"
                  price: "1.0"
                - id: "BTC"
                  price: "10000.0"

  # Markets related endpoints - Public Data
  /markets:
    get:
      description: "Returns info of each market available in C3 Exchange."
      operationId: getMarkets
      responses:
        200:
          description: All Markets response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AllMarkets"
  /markets/{marketId}:
    get:
      description: "Returns static data for a particular market."
      operationId: getMarket
      parameters:
        - in: path
          name: marketId
          required: true
          schema:
            $ref: "#/components/schemas/MarketId"
      responses:
        200:
          description: One Market response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Market"
        400:
          $ref: "#/components/responses/BadRequest"
        404:
          $ref: "#/components/responses/NotFound"
  /markets/{marketId}/stats:
    get:
      description: "Returns statistics and dynamic data for a particular market."
      operationId: getMarketStats
      parameters:
        - in: path
          name: marketId
          required: true
          schema:
            $ref: "#/components/schemas/MarketId"
      responses:
        200:
          description: One Market stats response
          content:
            application/json:
              schema:
                description: Array of market stats
                type: array
                items:
                  $ref: "#/components/schemas/MarketStats"
        400:
          $ref: "#/components/responses/BadRequest"
        404:
          $ref: "#/components/responses/NotFound"
  /markets/{marketId}/bars:
    get:
      description: "Returns price history for a particular market."
      operationId: getMarketBars
      parameters:
        - in: path
          name: marketId
          required: true
          schema:
            $ref: "#/components/schemas/MarketId"
        - in: query
          name: from
          description: Start timestamp interval inclusive
          required: true
          schema:
            $ref: "#/components/schemas/Timestamp"
        - in: query
          name: to
          description: End timestamp interval not inclusive
          required: true
          schema:
            $ref: "#/components/schemas/Timestamp"
        - in: query
          name: pageSize
          description: The maximum amount of levels to return
          schema:
            $ref: "#/components/schemas/Count"
        - in: query
          name: granularity
          description: Granularity name
          schema:
            $ref: "#/components/schemas/GranularityName"

      responses:
        200:
          description: One Market stats response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MarketBars"
        400:
          $ref: "#/components/responses/BadRequest"
        404:
          $ref: "#/components/responses/NotFound"
  /markets/{marketId}/orderbook:
    get:
      description: "Returns statistics and dynamic data for a particular market."
      operationId: getMarketOrderbook
      parameters:
        - in: path
          name: marketId
          required: true
          schema:
            $ref: "#/components/schemas/MarketId"
        - in: query
          name: priceGrouping
          description: The price value to group the orders into different levels
          schema:
            $ref: "#/components/schemas/Price"
        - in: query
          name: pageSize
          description: The maximum amount of levels to return
          schema:
            $ref: "#/components/schemas/Count"
      responses:
        200:
          description: One Market stats response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MarketOrderbook"
        400:
          $ref: "#/components/responses/BadRequest"
        404:
          $ref: "#/components/responses/NotFound"
  /markets/{marketId}/trades:
    get:
      description: "Returns latest trades data for a particular market."
      operationId: getMarketTrades
      parameters:
        - in: path
          name: marketId
          required: true
          schema:
            $ref: "#/components/schemas/MarketId"
        - in: query
          name: pageSize
          description: The maximum amount of trades to return
          schema:
            $ref: "#/components/schemas/Count"
      responses:
        200:
          description: One Market stats response
          content:
            application/json:
              schema:
                description: List of trades
                type: array
                items:
                  $ref: "#/components/schemas/Trade"
        400:
          $ref: "#/components/responses/BadRequest"
        404:
          $ref: "#/components/responses/NotFound"

  # User related endpoints - Private Data
  # Login-Logout process
  /login/start:
    get:
      description: "Initiates the login process by generating a nonce that must be signed by the user. The returned message is human-readable, providing a welcome to C3."
      operationId: loginStart
      parameters:
        - in: query
          name: chainId
          required: true
          schema:
            $ref: "#/components/schemas/ChainId"
        - in: query
          name: address
          required: true
          schema:
            type: string
          description: Blockchain Public Address
      responses:
        200:
          description: Account nonce response. The nonce is returned as a plain string value.
          content:
            application/text:
              schema:
                type: object
                required:
                  - nonce
                properties:
                  nonce:
                    type: string
        400:
          $ref: "#/components/responses/BadRequest"
  /login/complete:
    post:
      description: "Continues the login process by verifying the signed nonce obtained from the /loginStart endpoint. Returns user information including user ID, account ID, JWT token, and additional login statistics."
      operationId: loginComplete
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - chainId
                - address
                - signature
              properties:
                chainId:
                  $ref: "#/components/schemas/ChainId"
                address:
                  $ref: "#/components/schemas/UserId"
                signature:
                  $ref: "#/components/schemas/Signature"
      responses:
        200:
          $ref: "#/components/schemas/AccountLoginSuccessful"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
  /logout:
    post:
      description: "Log out the account."
      operationId: logout
      security:
        - BearerAuth: []
      responses:
        200:
          description: Account logged out successfuly
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"

  # Account related endpoints

  # --------------------------------------------------
  # Note for session scoped and account related endpoints:
  # * The operation executor is the logged user, their identity will be stored in the Bearer token (using JWT)
  # * The operation will be executed against the account specified in the endpoint URL
  # * In the cases where the account is not owned by the operator executor the system should validate if the executor has permissions to operate the account.
  # --------------------------------------------------
  /accounts/{accountId}:
    get:
      description: "Returns static data for a particular account."
      operationId: getAccount
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: accountId
          description: "The UserProxy address originated from the address of the owner of this account."
          required: true
          schema:
            $ref: "#/components/schemas/AccountId"
      responses:
        200:
          description: One Account response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Account"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
  # Account related endpoints - Markets
  /accounts/{accountId}/markets/{marketId}/limits:
    get:
      description: "Returns limits information for a particular maket for this account. Note: in future versiones the user should be able to reduce their limits explicitly."
      operationId: getAccountMarketLimits
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: accountId
          required: true
          schema:
            $ref: "#/components/schemas/AccountId"
        - in: path
          name: marketId
          required: true
          schema:
            $ref: "#/components/schemas/MarketId"
      responses:
        200:
          description: Maket limits for this account
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccountMarketLimits"
        400:
          $ref: "#/components/responses/BadRequest"
        404:
          $ref: "#/components/responses/NotFound"
  /accounts/{accountId}/markets/{marketId}/trades:
    parameters:
      - in: path
        name: accountId
        required: true
        schema:
          $ref: "#/components/schemas/AccountId"
      - in: path
        name: marketId
        required: true
        schema:
          $ref: "#/components/schemas/MarketId"
    get:
      description: "Returns trades made by this account for a particular market."
      operationId: getAccountTradesForMarket
      security:
        - BearerAuth: []
      parameters:
        - in: query
          name: offset
          schema:
            type: number
          required: false
        - in: query
          name: pageSize
          schema:
            $ref: "#/components/schemas/Count"
          required: false
        - in: query
          name: creator
          schema:
            $ref: "#/components/schemas/UserId"
          required: false
      responses:
        200:
          description: All orders from an account for a given market
          content:
            application/json:
              schema:
                type: array
                items:
                  allOf:
                    - $ref: "#/components/schemas/Trade"
                    - type: object
                      properties:
                        accountSide:
                          $ref: "#/components/schemas/AccountSide"
        400:
          $ref: "#/components/responses/BadRequest"
        404:
          $ref: "#/components/responses/NotFound"
  /accounts/{accountId}/markets/{marketId}/orders:
    parameters:
      - in: path
        name: accountId
        required: true
        schema:
          $ref: "#/components/schemas/AccountId"
      - in: path
        name: marketId
        required: true
        schema:
          $ref: "#/components/schemas/MarketId"
    get:
      description: "Returns orders created by this account for a particular market."
      operationId: getAccountOrdersForMarket
      security:
        - BearerAuth: []
      parameters:
        - in: query
          name: isOpen
          schema:
            type: boolean
            default: true
          required: false
          description: If true, only currently open orders will be returned
        - in: query
          name: creator
          schema:
            $ref: "#/components/schemas/UserId"
        - in: query
          name: ids
          schema:
            type: array
            items:
              $ref: "#/components/schemas/OrderId"
          required: false
          description: Optional list of order ids to retrieve
        - in: query
          name: fieldsToIgnore
          schema:
            type: array
            items:
              $ref: "#/components/schemas/IgnorableOrderFields"
          required: false
          description: Optional list of order fields to remove from each retrieved order. This parameter can be used to reduce the amount of information retrieved.
        - in: query
          name: offset
          schema:
            type: number
          required: false
        - in: query
          name: pageSize
          schema:
            $ref: "#/components/schemas/Count"
          required: false
      responses:
        200:
          description: All orders from an account for a given market
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Orders"
        400:
          $ref: "#/components/responses/BadRequest"
        404:
          $ref: "#/components/responses/NotFound"
    post:
      operationId: submitNewOrder
      description: |
        **Place a new order.**
        
        This action represents the user's intention to place a new order in a 'human-readable' language, as well as the settlement ticket, which is the message data signed by the user and then verified by the smart contract. 

        Although most of the 'human-readable' data (such as marketId, type, side, size) could be calculated from the settlement ticket data, we believe that explicitly stating this data by the user will improve the API's usability. 

        It will also enable the system to assist and ensure that the smart contract data accurately represents the user's intention.
      security:
        - BearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewOrderData"
            examples:
              # TODO: signatures in the example are not proper, it would be good to put real signatures.
              buyLimit:
                value:
                  marketId: "BTC-USDC"
                  type: "limit"
                  side: "buy"
                  price: 19175.50
                  size: 1
                  settlementTicket:
                    account: "4NBVMUVACZHLKXTU4WHGULXRPSYKR5MCRZ3FUVUGIJTVJBCL5GTUUUWHGM"
                    creator: "733BHFUPQ5BNKM6C3COBUSZVV5FVQHRNPKG7WQBQ4XNVA3WSCKBPGKVQXI"
                    buySlotId: 1
                    buyAmount: 100000000
                    sellSlotId: 2
                    sellAmount: 19271377500 # baseSize * price * (1+maxFees) * 10^buyInstrumentDecimals
                    maxBuyAmountToPool: 0
                    maxSellAmountFromPool: 0
                    expiresOn: 1667101802
                    nonce: 16671018020000
                    signature: "0xbe609aee343fb3c4b28e1df9e632fca64fcfaede20f02e86244efddf30957bd2"
                  sentTime: 1667187723000000
                  clientOrderId: "8e9fe0b1-abe2-47ec-b851-c2f45c0c06aa"
              sellLimit:
                value:
                  marketId: "BTC-USDC"
                  type: "limit"
                  side: "sell"
                  price: 19175.50
                  size: 1
                  settlementTicket:
                    account: "4NBVMUVACZHLKXTU4WHGULXRPSYKR5MCRZ3FUVUGIJTVJBCL5GTUUUWHGM"
                    creator: "733BHFUPQ5BNKM6C3COBUSZVV5FVQHRNPKG7WQBQ4XNVA3WSCKBPGKVQXI"
                    buySlotId: 1
                    buyAmount: 19079622500 # base * price * (1-maxFees) * 10^buyInstrumentDecimals
                    sellSlotId: 2
                    sellAmount: 100000000
                    maxBuyAmountToPool: 0
                    maxSellAmountFromPool: 0
                    expiresOn: 1667101802
                    signature: "0xfe609aee343fb3c4b28e1df9e632fca64fcfaede20f02e86244efddf30957bd2"
                  sentTime: 1667187723000000
                  clientOrderId: "f26bba76-306e-4c7a-8b0d-a42c7c89fa36"
              buyMarket:
                value:
                  marketId: "BTC-USDC"
                  orderId: "4NBVMUVACZHLKXTU4WHGULXRPSYKR5MCRZ3FUVUGIJTVJBCL5GTUUUWHGM"
                  type: "market"
                  side: "buy"
                  tif: "GTC"
                  quoteSize: 19500.75
                  settlementTicket:
                    account: "4NBVMUVACZHLKXTU4WHGULXRPSYKR5MCRZ3FUVUGIJTVJBCL5GTUUUWHGM"
                    creator: "733BHFUPQ5BNKM6C3COBUSZVV5FVQHRNPKG7WQBQ4XNVA3WSCKBPGKVQXI"
                    buyInstrumentId: BTC
                    buyAmount: 0
                    sellInstrumentId: USDC
                    sellAmount: 19500750000 # quoteSize * 10^sellInstrumentDecimals
                    maxBuyAmountToPool: 0
                    maxSellAmountFromPool: 0
                    expiresOn: 1667101802
                    signature: "0xa30aafcedde3452504a1943062e0e752be609aee343fb3c4b28e1f"
                  sentTime: 1667187723000000
                  clientOrderId: "1ed416de-9427-401e-bef8-afa941401661"
              sellMarket:
                value:
                  marketId: "BTC-USDC"
                  orderId: "4NBVMUVACZHLKXTU4WHGULXRPSYKR5MCRZ3FUVUGIJTVJBCL5GTUUUWHGM"
                  type: "limit"
                  side: "sell"
                  tif: "IOC"
                  baseSize: 1
                  settlementTicket:
                    account: "4NBVMUVACZHLKXTU4WHGULXRPSYKR5MCRZ3FUVUGIJTVJBCL5GTUUUWHGM"
                    creator: "733BHFUPQ5BNKM6C3COBUSZVV5FVQHRNPKG7WQBQ4XNVA3WSCKBPGKVQXI"
                    buyInstrumentId: USDC
                    buyAmount: 0
                    sellInstrumentId: BTC
                    sellAmount: 100000000 # baseSize * 10^sellInstrumentDecimals
                    maxBuyAmountToPool: 0
                    maxSellAmountFromPool: 0
                    expiresOn: 1667101802
                    signature: "0x3a03640174f3516ce18c2a7a7cac74044fcfaede20f02e86244efddf30957bd2"
                  sentTime: 1667187723000000
                  clientOrderId: "ddf71642-4257-4a55-8616-7a2dbe898996"
      responses:
        201:
          $ref: "#/components/responses/SuccessOrder"
        400:
          $ref: "#/components/responses/BadRequest"
        404:
          $ref: "#/components/responses/NotFound"
    delete:
      description: "Allow the user to cancel all market orders"
      operationId: cancelMarketOrders
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: accountId
          description: "The UserProxy address originated from the address of the owner of this account."
          required: true
          schema:
            $ref: "#/components/schemas/AccountId"
        - in: path
          name: marketId
          required: true
          schema:
            $ref: "#/components/schemas/MarketId"
        - in: query
          name: signature
          required: true
          schema:
            $ref: "#/components/schemas/Signature"
        - in: query
          name: creator
          schema:
            $ref: "#/components/schemas/UserId"
        - in: query
          name: allOrdersUntil
          required: true
          schema:
            $ref: "#/components/schemas/Timestamp"
      responses:
        202:
          #TODO: Define, does it return 202 if at least one order was found and cancelled?
          description: Cancel orders request accepted
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CancelledOrders"
        400:
          $ref: "#/components/responses/BadRequest"
        404:
          $ref: "#/components/responses/NotFound"
  /accounts/{accountId}/orders:
    delete:
      description: "Allow the user to cancel multiple open orders"
      operationId: cancelOrders
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: accountId
          description: "The UserProxy address originated from the address of the owner of this account."
          required: true
          schema:
            $ref: "#/components/schemas/AccountId"
        - in: query
          name: orders
          required: false
          schema:
            type: array
            items:
              $ref: "#/components/schemas/OrderId"
        - in: query
          name: signature
          required: true
          schema:
            $ref: "#/components/schemas/Signature"
        - in: query
          name: creator
          schema:
            $ref: "#/components/schemas/UserId"
        - in: query
          name: allOrdersUntil
          required: false
          schema:
            $ref: "#/components/schemas/Timestamp"
      responses:
        202:
          #TODO: Define, does it return 202 if at least one order was found and cancelled?
          description: Cancel orders request accepted
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CancelOrderTickets"
        400:
          $ref: "#/components/responses/BadRequest"
        404:
          $ref: "#/components/responses/NotFound"
  /accounts/{accountId}/deposit:
    post:
      description: "Initializes a deposit operation."
      operationId: submitDeposit
      parameters:
        - in: path
          name: accountId
          required: true
          schema:
            $ref: "#/components/schemas/AccountId"
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - type: object
                  required:
                    - instrumentId
                    - amount
                    - repayAmount
                  properties:
                    instrumentId:
                      $ref: "#/components/schemas/InstrumentId"
                    amount:
                      $ref: "#/components/schemas/Quantity"
                    repayAmount:
                      $ref: "#/components/schemas/Quantity"
                    note:
                      type: string
                - oneOf:
                    - type: object
                      required:
                        - algorandSignedFundingTransaction
                      properties:
                        algorandSignedFundingTransaction:
                          $ref: "#/components/schemas/AlgorandSignedTransaction"
                    - type: object
                      required:
                        - wormholeVAA
                      properties:
                        wormholeVAA:
                          $ref: "#/components/schemas/WormholeVAA"
      responses:
        201:
          $ref: "#/components/responses/SuccessOperation"
        400:
          $ref: "#/components/responses/BadRequest"
        404:
          $ref: "#/components/responses/NotFound"
  /accounts/{accountId}/withdraw:
    post:
      description: "Initializes a withdraw operation."
      operationId: submitWithdraw
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: accountId
          required: true
          schema:
            $ref: "#/components/schemas/AccountId"
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/BaseAmountOperationWithAmount"
                - type: object
                  required:
                    - instrumentId
                    - destination
                    - maxFees
                    - maxBorrow
                  properties:
                    instrumentId:
                      $ref: "#/components/schemas/InstrumentId"
                    maxBorrow:
                      $ref: "#/components/schemas/Quantity"
                    maxFees:
                      $ref: "#/components/schemas/Quantity"
                    destination:
                      $ref: "#/components/schemas/WithdrawDestinationAddress"
      responses:
        201:
          $ref: "#/components/responses/SuccessOperation"
        400:
          $ref: "#/components/responses/BadRequest"
        404:
          $ref: "#/components/responses/NotFound"
  /accounts/{accountId}/credit/{instrumentId}/lend:
    post:
      description: "Initializes a lend operation."
      operationId: submitLend
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: accountId
          required: true
          schema:
            $ref: "#/components/schemas/AccountId"
        - in: path
          name: instrumentId
          required: true
          schema:
            $ref: "#/components/schemas/InstrumentId"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BaseAmountOperationWithAmount"
      responses:
        201:
          $ref: "#/components/responses/SuccessOperation"
        400:
          $ref: "#/components/responses/BadRequest"
        404:
          $ref: "#/components/responses/NotFound"
  /accounts/{accountId}/credit/{instrumentId}/redeem:
    post:
      description: "Initializes a redeem operation."
      operationId: submitRedeem
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: accountId
          required: true
          schema:
            $ref: "#/components/schemas/AccountId"
        - in: path
          name: instrumentId
          required: true
          schema:
            $ref: "#/components/schemas/InstrumentId"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BaseAmountOperationWithAmount"
      responses:
        201:
          $ref: "#/components/responses/SuccessOperation"
        400:
          $ref: "#/components/responses/BadRequest"
        404:
          $ref: "#/components/responses/NotFound"
  /accounts/{accountId}/credit/{instrumentId}/borrow:
    post:
      description: "Initializes a borrow operation."
      operationId: submitBorrow
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: accountId
          required: true
          schema:
            $ref: "#/components/schemas/AccountId"
        - in: path
          name: instrumentId
          required: true
          schema:
            $ref: "#/components/schemas/InstrumentId"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BaseAmountOperationWithAmount"
      responses:
        201:
          $ref: "#/components/responses/SuccessOperation"
        400:
          $ref: "#/components/responses/BadRequest"
        404:
          $ref: "#/components/responses/NotFound"
  /accounts/{accountId}/credit/{instrumentId}/repay:
    post:
      description: "Initializes a repay operation."
      operationId: submitRepay
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: accountId
          required: true
          schema:
            $ref: "#/components/schemas/AccountId"
        - in: path
          name: instrumentId
          required: true
          schema:
            $ref: "#/components/schemas/InstrumentId"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BaseAmountOperationWithAmount"
      responses:
        201:
          $ref: "#/components/responses/SuccessOperation"
        400:
          $ref: "#/components/responses/BadRequest"
        404:
          $ref: "#/components/responses/NotFound"
  /accounts/{accountId}/liquidate:
    # --------------------------------------------------
    # As this endpoint involves two accounts it is better to clarify how are they identified:
    # * The operation executor is the account in the path, as any other operation
    # * The account under liquidation is the target account in the body
    # --------------------------------------------------
    post:
      description: "Initializes a liquidation operation."
      operationId: submitLiquidation
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: accountId
          description: "The liquidator account"
          required: true
          schema:
            $ref: "#/components/schemas/AccountId"
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/BaseAmountOperation"
                - type: object
                  required:
                    - liabilityBasket
                    - assetBasket
                    - target
                  properties:
                    liabilityBasket:
                      $ref: "#/components/schemas/Basket"
                    assetBasket:
                      $ref: "#/components/schemas/Basket"
                    target:
                      $ref: "#/components/schemas/AccountId"
      responses:
        201:
          $ref: "#/components/responses/SuccessOperation"
        400:
          $ref: "#/components/responses/BadRequest"
        404:
          $ref: "#/components/responses/NotFound"
  /accounts/{accountId}/refund:
    post:
      description: "Initializes a refund operation."
      operationId: submitRefund
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: accountId
          required: true
          schema:
            $ref: "#/components/schemas/AccountId"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - ticket
                - signature
              properties:
                ticket:
                  $ref: "#/components/schemas/CancelOrderTicket"
                signature:
                  $ref: "#/components/schemas/Signature"
      responses:
        201:
          $ref: "#/components/responses/SuccessOperation"
        400:
          $ref: "#/components/responses/BadRequest"
        404:
          $ref: "#/components/responses/NotFound"
  /accounts/{accountId}/delegations:
    post:
      description: "Adds permissions to a user."
      operationId: addNewDelegation
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: accountId
          required: true
          schema:
            $ref: "#/components/schemas/AccountId"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - controllingUser
                - delegationAttributes
                - signature
              properties:
                controllingUser:
                  $ref: "#/components/schemas/UserId"
                delegationAttributes:
                  $ref: "#/components/schemas/DelegationAttributes"
                signature:
                  $ref: "#/components/schemas/Signature"
      responses:
        201:
          $ref: "#/components/responses/SuccessOperation"
        400:
          $ref: "#/components/responses/BadRequest"
        404:
          $ref: "#/components/responses/NotFound"
    delete:
      description: "Removes permissions from a user."
      operationId: removeDelegation
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: accountId
          required: true
          schema:
            $ref: "#/components/schemas/AccountId"
        - in: query
          name: controllingUser
          required: true
          schema:
            $ref: "#/components/schemas/UserId"
        - in: query
          name: signature
          required: true
          schema:
            $ref: "#/components/schemas/Signature"
      responses:
        201:
          $ref: "#/components/responses/SuccessOperation"
        400:
          $ref: "#/components/responses/BadRequest"
        404:
          $ref: "#/components/responses/NotFound"
    get:
      description: "Returns users and permissions."
      operationId: getDelegations
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: accountId
          required: true
          schema:
            $ref: "#/components/schemas/AccountId"
      responses:
        201:
          description: New operation accepted
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  required:
                    - controllingUser
                    - delegationAttributes
                  properties:
                    controllingUser:
                      $ref: "#/components/schemas/UserId"
                    delegationAttributes:
                      $ref: "#/components/schemas/DelegationAttributes"
        400:
          $ref: "#/components/responses/BadRequest"
        404:
          $ref: "#/components/responses/NotFound"
  /accounts/{accountId}/balance:
    get:
      description: "Returns current balance for this account."
      operationId: getAccountBalance
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: accountId
          required: true
          schema:
            $ref: "#/components/schemas/AccountId"
      responses:
        200:
          description: Balance for this account
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccountBalance"
        400:
          $ref: "#/components/responses/BadRequest"
        404:
          $ref: "#/components/responses/NotFound"
  /accounts/{accountId}/operations:
    get:
      description: "Returns operations related to this account."
      operationId: getAccountOperations
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: accountId
          required: true
          schema:
            $ref: "#/components/schemas/AccountId"
        - in: query
          name: types
          description: "List of operation types to include, if not set it means all the operation types."
          required: false
          schema:
            type: array
            items:
              $ref: "#/components/schemas/AccountOperationType"
        - in: query
          name: statuses
          description: "List of operation statuses to include, if not set it means all the operation statuses."
          required: false
          schema:
            type: array
            items:
              $ref: "#/components/schemas/AccountOperationStatus"
        - in: query
          name: instrumentIds
          description: "List of related instruments to include, if not set it means all the instruments."
          required: false
          schema:
            type: array
            items:
              $ref: "#/components/schemas/InstrumentId"
        - in: query
          name: createdSince
          description: "The Operation should be created since this time or later"
          schema:
            $ref: "#/components/schemas/Timestamp"
          required: false
        - in: query
          name: createdUntil
          description: "The Operation should be created until this time or before"
          schema:
            $ref: "#/components/schemas/Timestamp"
          required: false
        - in: query
          name: idBefore
          description: "Only operations with an id lower than this will be returned"
          schema:
            type: number
          required: false
        - in: query
          name: pageSize
          description: "Number of items to return"
          schema:
            $ref: "#/components/schemas/Count"
          required: false
      responses:
        200:
          description: List of operations related to this account
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccountOperations"
        400:
          $ref: "#/components/responses/BadRequest"
        404:
          $ref: "#/components/responses/NotFound"
  /insolvent-accounts:
    get:
      description: "Returns the lists of all the account which are in state of liquidation. Balances are also included"
      operationId: getInsolventAccounts
      responses:
        200:
          description: List of operations related to this account
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InsolventAccounts"
          
  # /accounts/{accountId}/events:
  #   get:

  # /risk/margin:
  # /risk/prices:
  # /risk/factors:

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    SuccessOrder:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/OrderId"
    SuccessOperation:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/OperationId"
    Error:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
      required:
        - code
        - message

    # Basic types
    ContractId:
      type: number
      example: 32754106
    ChainId:
      type: number
      description: |
        The Chain ID represents different blockchain networks. Here's a mapping of the Chain IDs:
        - 1: SOLANA
        - 2: ETH
        - 3: TERRA
        - 4: BSC
        - 5: POLYGON
        - 6: AVAX
        - 7: OASIS
        - 8: ALGORAND
        - 9: AURORA
        - 10: FANTOM
        - 11: KARURA
        - 12: ACALA
        - 13: KLAYTN
        - 14: CELO
        - 15: NEAR
        - 16: MOONBEAM
        - 17: NEON
        - 18: TERRA2
        - 19: INJECTIVE
        - 20: OSMOSIS
        - 21: SUI
        - 22: APTOS
        - 23: ARBITRUM
        - 24: OPTIMISM
        - 25: GNOSIS
        - 26: PYTHNET
        - 28: XPLA
        - 29: BTC
        - 30: BASE
        - 32: SEI
        - 3104: WORMCHAIN
        - 10002: SEPOLIA
      enum:
        [
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9,
          10,
          11,
          12,
          13,
          14,
          15,
          16,
          17,
          18,
          19,
          20,
          21,
          22,
          23,
          24,
          25,
          26,
          10001,
          3104,
        ]
    Count:
      type: integer
      minimum: 1
      maximum: 100
      example: 10
    MarketStatus:
      type: string
    Timestamp:
          description: Epoch time in milliseconds
          type: integer
    OrderNonce:
      description: Value to ensure all the order's settlement values are different. 8 bytes integer.
      type: number
    Price:
      type: string
      example: "26258.82"
    Quantity:
      type: string
    ContractAmount:
      type: string
    Signature:
      type: string
    Lease:
      type: string
      example: "y1vC8jXwAlPEJccvS4v884/uvJj5tJc6bucKayD5P8M="
      description: Random 32 bytes number encoded in Base64 string
    OrderType:
      type: string
      enum:
        - "limit"
        - "market"
    IgnorableOrderFields:
      type: string
      enum:
        - "openOrderData"
        - "trades"
        - "cancelOrderTicket"
        - "makerFees"
        - "takerFees"
    OrderSide:
      type: string
      enum:
        - "buy"
        - "sell"
    AccountSide:
      type: string
      enum:
        - "BUYER"
        - "SELLER"
        - "BOTH"
    AlgorandSignedTransaction:
      type: string
    WormholeAddress:
      type: object
      properties:
        chain:
          $ref: "#/components/schemas/ChainId"
        address:
          type: string
          example: "0xa61BB243CF00Cd407ffAE11FDc51f5976cd2382D"
    WithdrawDestinationAddress:
      type: object
      properties:
        chain:
          type: string
          example: "ethereum"
        address:
          type: string
          example: "0xa61BB243CF00Cd407ffAE11FDc51f5976cd2382D"
    WormholeVAA:
      type: string

    # Ids for Entities
    InstrumentId:
      type: string
      description: Instrument identification or name
      example: "BTC"
    SlotId:
      type: number
      description: Contract Instrument identification
      example: 1
    MarketId:
      type: string
      description: Market identification or name
      example: "BTC-USDC"
    UserId:
      type: string
      description: C3 Client identification.
      example: "24AV37GGIROGSNBHH655DQAOQ75FBIVD2GSYGFV3ULEH3OYNQJWHKMQTEE"
    AccountId:
      type: string
      description: C3 Account identification.
      example: "C3_L6VD42QWIR2ESDCZKY7B7TIYVSZNLKKLNHFODICR35B4YPOULFK6USCS"
    AccountOnChainId:
      type: string
      description: On Chain C3 Account identification. It's 32 bytes of a public key encoded as Base64.
      example: 'AQIDBAECAwQBAgMEAQIDBAECAwQBAgMEAQIDBAECAwQ='
    ClientOrderId:
      type: string
      maxLength: 64
      description: Client side order identification.
      example: "862f572b-769b-41b6-9b9b-ac470c5d9bbb"
    OrderId:
      type: string
      description: Server side order identification.
      example: "I0mJdYc0aShzRZgnNFlyNAlYcjmEVyk0dZKDRTQ0NDQ="
    OperationId:
      type: string
      description: Operation identification.
      example: "OGKhmSE5rr+R2cx31/wNt5TaxYIYECWMlOvIkLwqjFc="

    # Instrument related entities
    Instrument:
      title: Instrument entity
      type: object
      required:
        - id
        - asaId
        - asaName
        - asaUnitName
        - asaDecimals
        - chains
      properties:
        id:
          $ref: "#/components/schemas/InstrumentId"
        asaId:
          type: number
          description: Algorand ASA id
        asaName:
          type: string
          description: Algorand ASA name
        asaUnitName:
          type: string
          description: Algorand ASA unit name
        asaDecimals:
          type: number
          description: Amount of decimals in ASA representation
        chains:
          type: array
          items:
            type: object
            required:
              - chainId
              - tokenAddress
            properties:
              chainId:
                $ref: "#/components/schemas/ChainId"
              tokenAddress:
                type: string
      example:
        id: "BTC"
        asaId: 101
        asaName: "wormhole.btc"
        asaUnitName: "wBTC"
        asaDecimals: 8
        chains:
          - chainId: 10
            tokenAddress: "0x3a03640174f3516ce18c2a7a7cac74044fcfaede"
    RiskFactors:
      title: Risk Factors entity
      type: object
      required:
        - haircut
        - margin
      properties:
        haircut:
          type: string
          description: Haircut percentage
        margin:
          type: string
          description: Margin percentage
    InstrumentRiskParameters:
      title: Instrument Risk Parameters entity
      type: object
      required:
        - inital
        - maintenance
        - optUtilization
      properties:
        initial:
          allOf:
            - $ref: "#/components/schemas/RiskFactors"
          description: Initial Risk Factors
        maintenance:
          allOf:
            - $ref: "#/components/schemas/RiskFactors"
          description: Maintenance Risk Factors
        optUtilization:
          type: string
          description: Optimal utilization percentage
    InstrumentWithRiskParameters:
      title: Instrument with Risk Parameters entity
      type: object
      required:
        - id
        - asaId
        - asaName
        - asaUnitName
        - asaDecimals
        - chains
        - riskParameters
      properties:
        id:
          $ref: "#/components/schemas/InstrumentId"
        asaId:
          type: number
          description: Algorand ASA id
        asaName:
          type: string
          description: Algorand ASA name
        asaUnitName:
          type: string
          description: Algorand ASA unit name
        asaDecimals:
          type: number
          description: Amount of decimals in ASA representation
        chains:
          type: array
          items:
            type: object
            required:
              - chainId
              - tokenAddress
            properties:
              chainId:
                $ref: "#/components/schemas/ChainId"
              tokenAddress:
                type: string
        riskParameters:
          $ref: "#/components/schemas/InstrumentRiskParameters"
    AllInstruments:
      title: All Instruments Response
      type: array
      items:
        $ref: "#/components/schemas/Instrument"
    InstrumentPool:
      title: Instrument Pool information
      type: object
      properties:
        id:
          $ref: "#/components/schemas/InstrumentId"
        borrowApr:
          type: number
          description: Borrow APR value
        lendApr:
          type: number
          description: Lend APR value
        totalLiquidity:
          $ref: "#/components/schemas/Quantity"
        totalBorrowed:
          $ref: "#/components/schemas/Quantity"
        liquidityThreshold:
          $ref: "#/components/schemas/Quantity"
    AllInstrumentPools:
      title: All Instrument Pools Response
      type: array
      items:
        $ref: "#/components/schemas/InstrumentPool"
    InstrumentPrice:
      title: Instrument Price information
      type: object
      properties:
        id:
          $ref: "#/components/schemas/InstrumentId"
        price:
          $ref: "#/components/schemas/Price"
      example:
        - id: "BTC"
          price: "25653.12"
        - id: "ETH"
          price: "1500.45"
    AllInstrumentPrices:
      title: All Instrument Prices Response
      type: array
      items:
        $ref: "#/components/schemas/InstrumentPrice"
    InstrumentAmount:
      type: object
      properties:
        instrumentId:
          $ref: "#/components/schemas/InstrumentId"
        amount:
          $ref: "#/components/schemas/Quantity"
      example:
      - instrumentId: "BTC"
        amount: "0.1201"
      - instrumentId: "ETH"
        amount: "-2.4545"
    Basket:
      type: array
      items:
        $ref: "#/components/schemas/InstrumentAmount"

    # Market related entities
    Market:
      title: Market Entity
      description: Market immutable data. This information defines how the market behaves but not the current statistics or status.
      type: object
      properties:
        id:
          $ref: "#/components/schemas/MarketId"
        baseInstrument:
          description: Base instrument for the Market
          allOf:
            - $ref: "#/components/schemas/Instrument"
        quoteInstrument:
          description: Quote instrument for the Market
          allOf:
            - $ref: "#/components/schemas/Instrument"
        priceIncrement:
          description: Minimum price increment
          allOf:
            - $ref: "#/components/schemas/Price"
        quantityIncrement:
          description: Minimum order size increment
          allOf:
            - $ref: "#/components/schemas/Quantity"
        minQuantity:
          description: Minimum order size
          allOf:
            - $ref: "#/components/schemas/Quantity"
        maxQuantity:
          description: Maximum order size
          allOf:
            - $ref: "#/components/schemas/Quantity"
        priceGroupings:
          type: array
          items:
            $ref: "#/components/schemas/Price"
      example:
        id: BTC-USDC
        baseInstrument:
          id: "SOL"
          asaId: 102
          asaName: "wormhole.sol"
          asaUnitName: "wSOL"
          asaDecimals: 9
          chains:
            - chainId: 8
              tokenAddress: "0xE654DB9dF47dfe951875a572236feD592CeC2a2b"
        quoteInstrument:
          id: "USDC"
          asaId: 31566704
          asaName: "USDC"
          asaUnitName: "USDC"
          asaDecimals: 6
          chains:
            - chainId: 2
              tokenAddress: "0x7679D36F06196a0045e233Cae6DfE515D2c59A8F"
            - chainId: 8
              tokenAddress: "0x4B01CD8a125dda1331bC15146c1C26966a6574b9"
        priceIncrement: 0.01
        quantityIncrement: 0.0001
        minQuantity: 0.0005
        maxQuantity: 50
    AllMarkets:
      title: All Markets Response
      type: array
      items:
        $ref: "#/components/schemas/Market"
    MarketStats:
      title: Market Stats Entity
      description: Market dynamic data. This information shows the current state of the market and its status.
      type: object
      properties:
        id:
          $ref: "#/components/schemas/MarketId"
        status:
          $ref: "#/components/schemas/MarketStatus"
        24hrBar:
          description: Stats for the last 24 hours period
          allOf:
            - $ref: "#/components/schemas/MarketBar"
      example:
        id: BTC-USDC
        status: trading
        24hrBar:
          - start: 1665892860
            end: 1665979260
            openPrice: 19180.63
            closePrice: 19172.32
            highPrice: 19425.84
            lowPrice: 19087.37
            baseVolume: 138750.0945
            quoteVolume: 2665799014.206784
    MarketBar:
      title: Market Bar Entity
      description: Market price history data.
      type: object
      properties:
        start:
          $ref: "#/components/schemas/Timestamp"
        end:
          $ref: "#/components/schemas/Timestamp"
        # Prices
        openPrice:
          description: Mid price at the start of the period
          allOf:
            - $ref: "#/components/schemas/Price"
        closePrice:
          description: Mid price at the end of the period
          allOf:
            - $ref: "#/components/schemas/Price"
        highPrice:
          description: Highest mid price during the period
          allOf:
            - $ref: "#/components/schemas/Price"
        lowPrice:
          description: Lowest mid price during the period
          allOf:
            - $ref: "#/components/schemas/Price"
        # Volume
        baseVolume:
          description: Total base volume traded during the period
          allOf:
            - $ref: "#/components/schemas/Quantity"
        quoteVolume:
          description: Total quote volume traded during the period
          allOf:
            - $ref: "#/components/schemas/Quantity"
    MarketBars:
      title: Market Bars Entity
      description: Market price history data.
      type: object
      properties:
        id:
          $ref: "#/components/schemas/MarketId"
        bars:
          type: array
          items:
            $ref: "#/components/schemas/MarketBar"
      example:
        id: "BTC-USDC"
        bars:
          - start: 1665979200
            end: 1665979260
            openPrice: 19180.63
            closePrice: 19172.32
            highPrice: 19181.84
            lowPrice: 19171.80
            baseVolume: 71.5500
            quoteVolume: 1372329.000000
          - start: 1665979260
            end: 1665979320
            openPrice: 19172.32
            closePrice: 19162.98
            highPrice: 19183.74
            lowPrice: 19161.55
            baseVolume: 124.7400
            quoteVolume: 2391296.985000
    MarketOrderbookLevel:
      type: object
      properties:
        price:
          $ref: "#/components/schemas/Price"
        volume:
          $ref: "#/components/schemas/Quantity"
    MarketOrderbook:
      title: Market Ordebook Entity
      description: Market orderbook data
      type: object
      properties:
        id:
          $ref: "#/components/schemas/MarketId"
        priceGrouping:
          description: Price change since start of day (00:00 UTC)
          allOf:
            - $ref: "#/components/schemas/Price"
            - example: 2.345
        bids:
          description: Array with Bids price and size
          type: array
          items:
            $ref: "#/components/schemas/MarketOrderbookLevel"
        asks:
          description: Array with Asks price and size
          type: array
          items:
            $ref: "#/components/schemas/MarketOrderbookLevel"
    MarketEvent:
      # TODO: We need to create a hierarchy of Market Events, identifying them by the "type" property and replacing the "data" property by a set of properties depending on each type
      type: object
      properties:
        timestamp:
          $ref: "#/components/schemas/Timestamp"
        type:
          type: string
        data:
          type: string
    MarketEvents:
      title: Market Events
      description: List of events for a particular Market
      type: object
      properties:
        id:
          $ref: "#/components/schemas/MarketId"
        since:
          $ref: "#/components/schemas/Timestamp"
        events:
          type: array
          items:
            $ref: "#/components/schemas/MarketEvent"

    # Account related entities
    Account:
      title: Account Entity
      description: Account immutable data.
      type: object
      properties:
        id:
          $ref: "#/components/schemas/AccountId"
        owner:
          description: Algorand User Proxy address derived from the walletAddress
          allOf:
            - $ref: "#/components/schemas/UserId"
        wallet:
          description: Account's Owner's address
          allOf:
            - $ref: "#/components/schemas/WormholeAddress"
        createdOn:
          $ref: "#/components/schemas/Timestamp"
    AccountLoginSuccessful:
      title: Account Login Successful response
      type: object
      properties:
        userId:
          $ref: "#/components/schemas/UserId"
        accountId:
          $ref: "#/components/schemas/AccountId"
        token:
          description: The returned token will contain the current UserId and all the operations requiring the token will have access to that UserId
          type: string
          example: "Bearer ABC123"
        firstLogin:
          type: boolean
          description: True if the account hasn't made a deposit
    AccountMarketLimits:
      type: object
      properties:
        # TODO: define proper limits
        maxBuyOrderSize:
          $ref: "#/components/schemas/Quantity"
        maxSellOrderSize:
          $ref: "#/components/schemas/Quantity"
        buyAvailableCash:
          $ref: "#/components/schemas/Quantity"
        sellAvailableCash:
          $ref: "#/components/schemas/Quantity"
        buyPoolBalance:
          $ref: "#/components/schemas/Quantity"
        sellPoolBalance:
          $ref: "#/components/schemas/Quantity"
    PortfolioOverview:
      type: object
      properties:
        value:
          $ref: "#/components/schemas/Quantity"
        availableMargin:
          $ref: "#/components/schemas/Quantity"
        buyingPower:
          $ref: "#/components/schemas/Quantity"
        health:
          $ref: "#/components/schemas/Quantity"
        leverage:
          $ref: "#/components/schemas/Quantity"
        adjustedMaintenanceMargin:
          $ref: "#/components/schemas/Quantity"
    BalanceInstrumentInfo:
      type: object
      properties:
        instrumentId:
          $ref: "#/components/schemas/InstrumentId"
        availableCash:
          $ref: "#/components/schemas/Quantity"
        lockedCash:
          $ref: "#/components/schemas/Quantity"
        maxBorrow:
          $ref: "#/components/schemas/Quantity"
        maxLend:
          $ref: "#/components/schemas/Quantity"
        maxWithdraw:
          $ref: "#/components/schemas/Quantity"
        maxWithdrawWithBorrow:
          $ref: "#/components/schemas/Quantity"
        cash:
          $ref: "#/components/schemas/Quantity"
        poolPosition:
          $ref: "#/components/schemas/Quantity"
        shortfall:
          $ref: "#/components/schemas/Quantity"
    AccountBalance:
      type: object
      properties:
        # TODO: define proper off-chain balance
        portfolioOverview:
          $ref: "#/components/schemas/PortfolioOverview"
        instrumentsInfo:
          type: array
          items:
            $ref: "#/components/schemas/BalanceInstrumentInfo"

    # Operation related entities
    BaseAmountOperation:
      type: object
      required:
        - lease
        - lastValid
        - signature
      properties:
        lease:
          $ref: "#/components/schemas/Lease"
        lastValid:
          type: number
          example: 30628460
        signature:
          $ref: "#/components/schemas/Signature"
    BaseAmountOperationWithAmount:
      allOf:
        - $ref: "#/components/schemas/BaseAmountOperation"
        - type: object
          required:
            - amount
          properties:
            amount:
              $ref: "#/components/schemas/Quantity"

    # Trades related entities
    Trade:
      type: object
      properties:
        marketId:
          $ref: "#/components/schemas/MarketId"
        buyOrderId:
          $ref: "#/components/schemas/OrderId"
        sellOrderId:
          $ref: "#/components/schemas/OrderId"
        tradeOn:
          $ref: "#/components/schemas/Timestamp"
        tradeBaseAmount:
          $ref: "#/components/schemas/Quantity"
        tradeQuoteAmount:
          $ref: "#/components/schemas/Quantity"
        tradeBuyFees:
          $ref: "#/components/schemas/Quantity"
        tradeSellFees:
          $ref: "#/components/schemas/Quantity"
        tradePrice:
          $ref: "#/components/schemas/Quantity"
        buyOrderCompleted:
          type: boolean
        sellOrderCompleted:
          type: boolean
        buyOrderIsTaker:
          type: boolean
        status:
          type: string
          enum:
            - "PENDING"
            - "SETTLED"
            - "FAILED"

    # Orders related entities
    SettlementTicket:
      description: This entity contains all the required data to validate and settle the order execution by the underlying smart contracts.
      type: object
      required:
        - account
        - creator
        - buySlotId
        - buyAmount
        - sellSlotId
        - sellAmount
        - maxBuyAmountToPool
        - maxSellAmountFromPool
        - nonce
        - expiresOn
        - signature
      properties:
        account:
          $ref: '#/components/schemas/AccountOnChainId'
        creator:
          $ref: "#/components/schemas/UserId"
        buySlotId:
          $ref: "#/components/schemas/SlotId"
        buyAmount:
          $ref: "#/components/schemas/ContractAmount"
        sellSlotId:
          $ref: "#/components/schemas/SlotId"
        sellAmount:
          $ref: "#/components/schemas/ContractAmount"
        maxBuyAmountToPool:
          $ref: "#/components/schemas/ContractAmount"
        maxSellAmountFromPool:
          $ref: "#/components/schemas/ContractAmount"
        nonce:
          $ref: "#/components/schemas/OrderNonce"
        expiresOn:
          $ref: "#/components/schemas/Timestamp"
        signature:
          $ref: "#/components/schemas/Signature"
    NewOrderData:
      description:
        This action represents the user's intention to place a new order in a 'human-readable' language, as well as the settlement ticket, which is the message data signed by the user and then verified by the smart contract. 
        Although most of the 'human-readable' data (such as marketId, type, side, size) could be calculated from the settlement ticket data, we believe that explicitly stating this data by the user will improve the API's usability. 
        It will also enable the system to assist and ensure that the smart contract data accurately represents the user's intention.
      type: object
      required:
        - marketId
        - type
        - side
        - size
        - settlementTicket
      properties:
        marketId:
          $ref: "#/components/schemas/MarketId"
        type:
          $ref: "#/components/schemas/OrderType"
        side:
          $ref: "#/components/schemas/OrderSide"
        size:
          description:
            Size of the order, in base currency for limit and sell market orders, in quote for buy market orderrs.
            (i.e. a limit ETH-USDC of size 1 represents 1 ETH, a buy market ETH-USDC of size 10 represents 10 USDC ).
          allOf:
            - $ref: "#/components/schemas/Quantity"
        settlementTicket:
          $ref: "#/components/schemas/SettlementTicket"
        price:
          $ref: "#/components/schemas/Price"
        sentTime:
          $ref: "#/components/schemas/Timestamp"
        clientOrderId:
          description: Unique client order identification
          allOf:
            - $ref: "#/components/schemas/ClientOrderId"
    CancelledOrder:
      type: object
      properties:
        cancellationReceivedOn:
          $ref: "#/components/schemas/Timestamp"
        status:
          type: boolean
        orderId:
          $ref: "#/components/schemas/OrderId"
    CancelledOrders:
      type: array
      items:
        $ref: "#/components/schemas/CancelledOrder"
    CancelOrderTicket:
      type: object
      properties:
        account:
          $ref: "#/components/schemas/AccountId"
        creator:
          $ref: "#/components/schemas/UserId"
        orderId:
          $ref: "#/components/schemas/OrderId"
        haveId:
          $ref: "#/components/schemas/InstrumentId"
        haveAmount:
          $ref: "#/components/schemas/ContractAmount"
        cancelOn:
          $ref: "#/components/schemas/Timestamp"
        refundRequest:
          type: string
    CancelOrderTickets:
      type: array
      items:
        $ref: "#/components/schemas/CancelOrderTicket"
    Order:
      type: object
      required:
        - id
        - newOrderData
        - addedOn
      properties:
        id:
          $ref: "#/components/schemas/OrderId"
        newOrderData:
          $ref: "#/components/schemas/NewOrderData"
        openOrderData:
          type: object
          properties:
            remainingAmount:
              $ref: "#/components/schemas/Quantity"
            locked:
              $ref: "#/components/schemas/Quantity"
            status:
              type: string
              enum:
                - "Pending"
                - "Closed"
                - "InBook"
                - "WaitTrigger"
        trades:
          type: array
          items:
            $ref: "#/components/schemas/Trade"
        cancelOrderTicket:
          $ref: "#/components/schemas/CancelOrderTicket"
        # TODO: Check if makerFees and takerFees are required or if it's better to return them just in the trades
        makerFees:
          $ref: "#/components/schemas/Quantity"
        takerFees:
          $ref: "#/components/schemas/Quantity"
        addedOn:
          $ref: "#/components/schemas/Timestamp"
    Orders:
      title: C3 Orders
      description: List of orders
      type: array
      items:
        $ref: "#/components/schemas/Order"
    AccountOperationStatus:
      title: Account operation status
      description: Status of an account operation
      type: string
      enum:
        - "pending"
        - "settled"
        - "failed"
    AccountOperationType:
      title: Operation type
      description: Type of operation
      type: string
      enum:
        - "deposit"
        - "withdraw"
        - "lend"
        - "redeem"
        - "borrow"
        - "repay"
        - "liquidate"
        - "account_move"
        - "refund"
        - "received_liquidation"

    DepositExtraInfo:
      type: object
      properties:
        repayAmount:
          $ref: "#/components/schemas/Quantity"
        origin:
          $ref: "#/components/schemas/WormholeAddress"
    WithdrawExtraInfo:
      type: object
      properties:
        maxFees:
          $ref: "#/components/schemas/Quantity"
        maxBorrow:
          $ref: "#/components/schemas/Quantity"
        lockedCash:
          $ref: "#/components/schemas/Quantity"
        destination:
          $ref: "#/components/schemas/WormholeAddress"
    WormholeWithdrawExtraInfo:
      allOf:
        - $ref: "#/components/schemas/WithdrawExtraInfo"
        - type: object
          properties:
            sendTransferTxId:
              type: string
    LiquidateExtraInfo:
      type: object
      properties:
        liquidatee:
          $ref: "#/components/schemas/AccountId"
        cash:
          $ref: "#/components/schemas/Basket"
        pool:
          $ref: "#/components/schemas/Basket"
    ReceivedLiquidationExtraInfo:
      type: object
      properties:
        liquidator:
          $ref: "#/components/schemas/AccountId"
        cash:
          $ref: "#/components/schemas/Basket"
        pool:
          $ref: "#/components/schemas/Basket"

    AccountOperation:
      title: C3 Account Operation
      description: Basic information for an account operation
      type: object
      properties:
        id:
          $ref: "#/components/schemas/OperationId"
        type:
          $ref: "#/components/schemas/AccountOperationType"
        status:
          $ref: "#/components/schemas/AccountOperationStatus"
        groupId:
          type: string
        instrumentId:
          $ref: "#/components/schemas/InstrumentId"
        amount:
          $ref: "#/components/schemas/Quantity"
        createdOn:
          $ref: "#/components/schemas/Timestamp"
        extraInfo:
          oneOf:
            - $ref: "#/components/schemas/DepositExtraInfo"
            - $ref: "#/components/schemas/WithdrawExtraInfo"
            - $ref: "#/components/schemas/WormholeWithdrawExtraInfo"
            - $ref: "#/components/schemas/LiquidateExtraInfo"
            - $ref: "#/components/schemas/ReceivedLiquidationExtraInfo"
    AccountOperations:
      description: List of account operations
      type: array
      items:
        $ref: "#/components/schemas/AccountOperation"
    InsolventAccounts:
      description: Accounts to be liquidated
      type: object
      properties:
        prices:
          $ref: "#/components/schemas/AllInstrumentPrices"
        accounts:
          type: array
          items:
            $ref: "#/components/schemas/InsolventAccountsBalance"  
    InsolventAccountsBalance:
      description: List of Insolvent Accounts
      type: object
      properties:
          accountId:
            $ref: "#/components/schemas/AccountId"
          health:
            type: string 
            example: "-25.45"
          cash:
            type: array
            items:
              $ref: "#/components/schemas/InstrumentAmount"
          pool:
            type: array
            items:
              $ref: "#/components/schemas/InstrumentAmount"

    DelegationPermissionLimit:
      type: object
      properties:
        instrumentId:
          $ref: "#/components/schemas/InstrumentId"
        limit:
          $ref: "#/components/schemas/Quantity"
    DelegationPermission:
      type: object
      properties:
        operation:
          type: string
          enum:
            - "LendAndRedeem"
            - "BorrowAndRepay"
            - "Trade"
        limits:
          type: array
          items:
            $ref: "#/components/schemas/DelegationPermissionLimit"
    DelegationAttributes:
      type: object
      properties:
        version:
          type: number
        permissions:
          type: array
          items:
            $ref: "#/components/schemas/DelegationPermission"
        expiresOn:
          $ref: "#/components/schemas/Timestamp"
    GranularityName:
      type: string
      enum:
        - "5m"
        - "1H"
        - "1D"
    SystemInfo:
      type: object
      required:
        - commitHash
        - serverAddress
        - withdrawBuffer
        - lastBlockParsed
        - contractIds
      properties:
        commitHash:
          type: string
          example: "123456e9cdc015e68db916fa1234e84fc30681ce"
        serverAddress:
          $ref: "#/components/schemas/UserId"
        withdrawBuffer:
          $ref: "#/components/schemas/AccountId"
        lastBlockParsed:
          type: number
          example: 30628460
        contractIds:
          required:
            - ceOnchain
            - pricecaster
          type: object
          properties:
            ceOnchain:
              $ref: "#/components/schemas/ContractId"
            pricecaster:
              $ref: "#/components/schemas/ContractId"

  responses:
    SuccessOperation:
      description: New operation accepted
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/SuccessOperation"
    SuccessOrder:
      description: New operation accepted
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/SuccessOrder"
    BadRequest:
      description: The request or the parameters are invalid
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    NotFound:
      description: The specified resource was not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
